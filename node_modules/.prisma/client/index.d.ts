
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model association_table
 * 
 */
export type association_table = {
  id: number
  business_id: number | null
  user_id: number | null
}

/**
 * Model businesses
 * 
 */
export type businesses = {
  id: number
  biz_name: string
  owner: string
  email: string
  password: string
  business_type: businesses_business_type
  verified: boolean | null
  address: string
  image: string
  usersId: number | null
}

/**
 * Model post
 * 
 */
export type post = {
  id: number
  business_id: number | null
  image: string
  body: string
  postedAT: Date
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  name: string
  email: string
  username: string
  password: string
  address: string
  image: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const businesses_business_type: {
  Beauty: 'Beauty',
  Food: 'Food',
  Coffee: 'Coffee',
  BusinessService: 'BusinessService',
  Hobbies: 'Hobbies',
  Other: 'Other'
};

export type businesses_business_type = (typeof businesses_business_type)[keyof typeof businesses_business_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Association_tables
 * const association_tables = await prisma.association_table.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Association_tables
   * const association_tables = await prisma.association_table.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.association_table`: Exposes CRUD operations for the **association_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Association_tables
    * const association_tables = await prisma.association_table.findMany()
    * ```
    */
  get association_table(): Prisma.association_tableDelegate<GlobalReject>;

  /**
   * `prisma.businesses`: Exposes CRUD operations for the **businesses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Businesses
    * const businesses = await prisma.businesses.findMany()
    * ```
    */
  get businesses(): Prisma.businessesDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.postDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.1.1
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    association_table: 'association_table',
    businesses: 'businesses',
    post: 'post',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BusinessesCountOutputType
   */


  export type BusinessesCountOutputType = {
    association_table: number
    post: number
  }

  export type BusinessesCountOutputTypeSelect = {
    association_table?: boolean
    post?: boolean
  }

  export type BusinessesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BusinessesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BusinessesCountOutputType
    : S extends undefined
    ? never
    : S extends BusinessesCountOutputTypeArgs
    ?'include' extends U
    ? BusinessesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BusinessesCountOutputType ? BusinessesCountOutputType[P] : never
  } 
    : BusinessesCountOutputType
  : BusinessesCountOutputType




  // Custom InputTypes

  /**
   * BusinessesCountOutputType without action
   */
  export type BusinessesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BusinessesCountOutputType
     * 
    **/
    select?: BusinessesCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    following: number
    association_table: number
  }

  export type UsersCountOutputTypeSelect = {
    following?: boolean
    association_table?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model association_table
   */


  export type AggregateAssociation_table = {
    _count: Association_tableCountAggregateOutputType | null
    _avg: Association_tableAvgAggregateOutputType | null
    _sum: Association_tableSumAggregateOutputType | null
    _min: Association_tableMinAggregateOutputType | null
    _max: Association_tableMaxAggregateOutputType | null
  }

  export type Association_tableAvgAggregateOutputType = {
    id: number | null
    business_id: number | null
    user_id: number | null
  }

  export type Association_tableSumAggregateOutputType = {
    id: number | null
    business_id: number | null
    user_id: number | null
  }

  export type Association_tableMinAggregateOutputType = {
    id: number | null
    business_id: number | null
    user_id: number | null
  }

  export type Association_tableMaxAggregateOutputType = {
    id: number | null
    business_id: number | null
    user_id: number | null
  }

  export type Association_tableCountAggregateOutputType = {
    id: number
    business_id: number
    user_id: number
    _all: number
  }


  export type Association_tableAvgAggregateInputType = {
    id?: true
    business_id?: true
    user_id?: true
  }

  export type Association_tableSumAggregateInputType = {
    id?: true
    business_id?: true
    user_id?: true
  }

  export type Association_tableMinAggregateInputType = {
    id?: true
    business_id?: true
    user_id?: true
  }

  export type Association_tableMaxAggregateInputType = {
    id?: true
    business_id?: true
    user_id?: true
  }

  export type Association_tableCountAggregateInputType = {
    id?: true
    business_id?: true
    user_id?: true
    _all?: true
  }

  export type Association_tableAggregateArgs = {
    /**
     * Filter which association_table to aggregate.
     * 
    **/
    where?: association_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of association_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<association_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: association_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` association_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` association_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned association_tables
    **/
    _count?: true | Association_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Association_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Association_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Association_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Association_tableMaxAggregateInputType
  }

  export type GetAssociation_tableAggregateType<T extends Association_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateAssociation_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssociation_table[P]>
      : GetScalarType<T[P], AggregateAssociation_table[P]>
  }




  export type Association_tableGroupByArgs = {
    where?: association_tableWhereInput
    orderBy?: Enumerable<association_tableOrderByWithAggregationInput>
    by: Array<Association_tableScalarFieldEnum>
    having?: association_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Association_tableCountAggregateInputType | true
    _avg?: Association_tableAvgAggregateInputType
    _sum?: Association_tableSumAggregateInputType
    _min?: Association_tableMinAggregateInputType
    _max?: Association_tableMaxAggregateInputType
  }


  export type Association_tableGroupByOutputType = {
    id: number
    business_id: number | null
    user_id: number | null
    _count: Association_tableCountAggregateOutputType | null
    _avg: Association_tableAvgAggregateOutputType | null
    _sum: Association_tableSumAggregateOutputType | null
    _min: Association_tableMinAggregateOutputType | null
    _max: Association_tableMaxAggregateOutputType | null
  }

  type GetAssociation_tableGroupByPayload<T extends Association_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Association_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Association_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Association_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Association_tableGroupByOutputType[P]>
        }
      >
    >


  export type association_tableSelect = {
    id?: boolean
    business_id?: boolean
    user_id?: boolean
    businesses?: boolean | businessesArgs
    users?: boolean | usersArgs
  }

  export type association_tableInclude = {
    businesses?: boolean | businessesArgs
    users?: boolean | usersArgs
  }

  export type association_tableGetPayload<
    S extends boolean | null | undefined | association_tableArgs,
    U = keyof S
      > = S extends true
        ? association_table
    : S extends undefined
    ? never
    : S extends association_tableArgs | association_tableFindManyArgs
    ?'include' extends U
    ? association_table  & {
    [P in TrueKeys<S['include']>]:
        P extends 'businesses' ? businessesGetPayload<S['include'][P]> | null :
        P extends 'users' ? usersGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'businesses' ? businessesGetPayload<S['select'][P]> | null :
        P extends 'users' ? usersGetPayload<S['select'][P]> | null :  P extends keyof association_table ? association_table[P] : never
  } 
    : association_table
  : association_table


  type association_tableCountArgs = Merge<
    Omit<association_tableFindManyArgs, 'select' | 'include'> & {
      select?: Association_tableCountAggregateInputType | true
    }
  >

  export interface association_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Association_table that matches the filter.
     * @param {association_tableFindUniqueArgs} args - Arguments to find a Association_table
     * @example
     * // Get one Association_table
     * const association_table = await prisma.association_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends association_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, association_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'association_table'> extends True ? CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>> : CheckSelect<T, Prisma__association_tableClient<association_table | null >, Prisma__association_tableClient<association_tableGetPayload<T> | null >>

    /**
     * Find the first Association_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {association_tableFindFirstArgs} args - Arguments to find a Association_table
     * @example
     * // Get one Association_table
     * const association_table = await prisma.association_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends association_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, association_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'association_table'> extends True ? CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>> : CheckSelect<T, Prisma__association_tableClient<association_table | null >, Prisma__association_tableClient<association_tableGetPayload<T> | null >>

    /**
     * Find zero or more Association_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {association_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Association_tables
     * const association_tables = await prisma.association_table.findMany()
     * 
     * // Get first 10 Association_tables
     * const association_tables = await prisma.association_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const association_tableWithIdOnly = await prisma.association_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends association_tableFindManyArgs>(
      args?: SelectSubset<T, association_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<association_table>>, PrismaPromise<Array<association_tableGetPayload<T>>>>

    /**
     * Create a Association_table.
     * @param {association_tableCreateArgs} args - Arguments to create a Association_table.
     * @example
     * // Create one Association_table
     * const Association_table = await prisma.association_table.create({
     *   data: {
     *     // ... data to create a Association_table
     *   }
     * })
     * 
    **/
    create<T extends association_tableCreateArgs>(
      args: SelectSubset<T, association_tableCreateArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Create many Association_tables.
     *     @param {association_tableCreateManyArgs} args - Arguments to create many Association_tables.
     *     @example
     *     // Create many Association_tables
     *     const association_table = await prisma.association_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends association_tableCreateManyArgs>(
      args?: SelectSubset<T, association_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Association_table.
     * @param {association_tableDeleteArgs} args - Arguments to delete one Association_table.
     * @example
     * // Delete one Association_table
     * const Association_table = await prisma.association_table.delete({
     *   where: {
     *     // ... filter to delete one Association_table
     *   }
     * })
     * 
    **/
    delete<T extends association_tableDeleteArgs>(
      args: SelectSubset<T, association_tableDeleteArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Update one Association_table.
     * @param {association_tableUpdateArgs} args - Arguments to update one Association_table.
     * @example
     * // Update one Association_table
     * const association_table = await prisma.association_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends association_tableUpdateArgs>(
      args: SelectSubset<T, association_tableUpdateArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Delete zero or more Association_tables.
     * @param {association_tableDeleteManyArgs} args - Arguments to filter Association_tables to delete.
     * @example
     * // Delete a few Association_tables
     * const { count } = await prisma.association_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends association_tableDeleteManyArgs>(
      args?: SelectSubset<T, association_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Association_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {association_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Association_tables
     * const association_table = await prisma.association_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends association_tableUpdateManyArgs>(
      args: SelectSubset<T, association_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Association_table.
     * @param {association_tableUpsertArgs} args - Arguments to update or create a Association_table.
     * @example
     * // Update or create a Association_table
     * const association_table = await prisma.association_table.upsert({
     *   create: {
     *     // ... data to create a Association_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Association_table we want to update
     *   }
     * })
    **/
    upsert<T extends association_tableUpsertArgs>(
      args: SelectSubset<T, association_tableUpsertArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Find one Association_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {association_tableFindUniqueOrThrowArgs} args - Arguments to find a Association_table
     * @example
     * // Get one Association_table
     * const association_table = await prisma.association_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends association_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, association_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Find the first Association_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {association_tableFindFirstOrThrowArgs} args - Arguments to find a Association_table
     * @example
     * // Get one Association_table
     * const association_table = await prisma.association_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends association_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, association_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__association_tableClient<association_table>, Prisma__association_tableClient<association_tableGetPayload<T>>>

    /**
     * Count the number of Association_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {association_tableCountArgs} args - Arguments to filter Association_tables to count.
     * @example
     * // Count the number of Association_tables
     * const count = await prisma.association_table.count({
     *   where: {
     *     // ... the filter for the Association_tables we want to count
     *   }
     * })
    **/
    count<T extends association_tableCountArgs>(
      args?: Subset<T, association_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Association_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Association_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Association_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Association_tableAggregateArgs>(args: Subset<T, Association_tableAggregateArgs>): PrismaPromise<GetAssociation_tableAggregateType<T>>

    /**
     * Group by Association_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Association_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Association_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Association_tableGroupByArgs['orderBy'] }
        : { orderBy?: Association_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Association_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssociation_tableGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for association_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__association_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    businesses<T extends businessesArgs = {}>(args?: Subset<T, businessesArgs>): CheckSelect<T, Prisma__businessesClient<businesses | null >, Prisma__businessesClient<businessesGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * association_table base type for findUnique actions
   */
  export type association_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * Filter, which association_table to fetch.
     * 
    **/
    where: association_tableWhereUniqueInput
  }

  /**
   * association_table: findUnique
   */
  export interface association_tableFindUniqueArgs extends association_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * association_table base type for findFirst actions
   */
  export type association_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * Filter, which association_table to fetch.
     * 
    **/
    where?: association_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of association_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<association_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for association_tables.
     * 
    **/
    cursor?: association_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` association_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` association_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of association_tables.
     * 
    **/
    distinct?: Enumerable<Association_tableScalarFieldEnum>
  }

  /**
   * association_table: findFirst
   */
  export interface association_tableFindFirstArgs extends association_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * association_table findMany
   */
  export type association_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * Filter, which association_tables to fetch.
     * 
    **/
    where?: association_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of association_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<association_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing association_tables.
     * 
    **/
    cursor?: association_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` association_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` association_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Association_tableScalarFieldEnum>
  }


  /**
   * association_table create
   */
  export type association_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * The data needed to create a association_table.
     * 
    **/
    data: XOR<association_tableCreateInput, association_tableUncheckedCreateInput>
  }


  /**
   * association_table createMany
   */
  export type association_tableCreateManyArgs = {
    /**
     * The data used to create many association_tables.
     * 
    **/
    data: Enumerable<association_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * association_table update
   */
  export type association_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * The data needed to update a association_table.
     * 
    **/
    data: XOR<association_tableUpdateInput, association_tableUncheckedUpdateInput>
    /**
     * Choose, which association_table to update.
     * 
    **/
    where: association_tableWhereUniqueInput
  }


  /**
   * association_table updateMany
   */
  export type association_tableUpdateManyArgs = {
    /**
     * The data used to update association_tables.
     * 
    **/
    data: XOR<association_tableUpdateManyMutationInput, association_tableUncheckedUpdateManyInput>
    /**
     * Filter which association_tables to update
     * 
    **/
    where?: association_tableWhereInput
  }


  /**
   * association_table upsert
   */
  export type association_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * The filter to search for the association_table to update in case it exists.
     * 
    **/
    where: association_tableWhereUniqueInput
    /**
     * In case the association_table found by the `where` argument doesn't exist, create a new association_table with this data.
     * 
    **/
    create: XOR<association_tableCreateInput, association_tableUncheckedCreateInput>
    /**
     * In case the association_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<association_tableUpdateInput, association_tableUncheckedUpdateInput>
  }


  /**
   * association_table delete
   */
  export type association_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
    /**
     * Filter which association_table to delete.
     * 
    **/
    where: association_tableWhereUniqueInput
  }


  /**
   * association_table deleteMany
   */
  export type association_tableDeleteManyArgs = {
    /**
     * Filter which association_tables to delete
     * 
    **/
    where?: association_tableWhereInput
  }


  /**
   * association_table: findUniqueOrThrow
   */
  export type association_tableFindUniqueOrThrowArgs = association_tableFindUniqueArgsBase
      

  /**
   * association_table: findFirstOrThrow
   */
  export type association_tableFindFirstOrThrowArgs = association_tableFindFirstArgsBase
      

  /**
   * association_table without action
   */
  export type association_tableArgs = {
    /**
     * Select specific fields to fetch from the association_table
     * 
    **/
    select?: association_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: association_tableInclude | null
  }



  /**
   * Model businesses
   */


  export type AggregateBusinesses = {
    _count: BusinessesCountAggregateOutputType | null
    _avg: BusinessesAvgAggregateOutputType | null
    _sum: BusinessesSumAggregateOutputType | null
    _min: BusinessesMinAggregateOutputType | null
    _max: BusinessesMaxAggregateOutputType | null
  }

  export type BusinessesAvgAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type BusinessesSumAggregateOutputType = {
    id: number | null
    usersId: number | null
  }

  export type BusinessesMinAggregateOutputType = {
    id: number | null
    biz_name: string | null
    owner: string | null
    email: string | null
    password: string | null
    business_type: businesses_business_type | null
    verified: boolean | null
    address: string | null
    image: string | null
    usersId: number | null
  }

  export type BusinessesMaxAggregateOutputType = {
    id: number | null
    biz_name: string | null
    owner: string | null
    email: string | null
    password: string | null
    business_type: businesses_business_type | null
    verified: boolean | null
    address: string | null
    image: string | null
    usersId: number | null
  }

  export type BusinessesCountAggregateOutputType = {
    id: number
    biz_name: number
    owner: number
    email: number
    password: number
    business_type: number
    verified: number
    address: number
    image: number
    usersId: number
    _all: number
  }


  export type BusinessesAvgAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type BusinessesSumAggregateInputType = {
    id?: true
    usersId?: true
  }

  export type BusinessesMinAggregateInputType = {
    id?: true
    biz_name?: true
    owner?: true
    email?: true
    password?: true
    business_type?: true
    verified?: true
    address?: true
    image?: true
    usersId?: true
  }

  export type BusinessesMaxAggregateInputType = {
    id?: true
    biz_name?: true
    owner?: true
    email?: true
    password?: true
    business_type?: true
    verified?: true
    address?: true
    image?: true
    usersId?: true
  }

  export type BusinessesCountAggregateInputType = {
    id?: true
    biz_name?: true
    owner?: true
    email?: true
    password?: true
    business_type?: true
    verified?: true
    address?: true
    image?: true
    usersId?: true
    _all?: true
  }

  export type BusinessesAggregateArgs = {
    /**
     * Filter which businesses to aggregate.
     * 
    **/
    where?: businessesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of businesses to fetch.
     * 
    **/
    orderBy?: Enumerable<businessesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: businessesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` businesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` businesses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned businesses
    **/
    _count?: true | BusinessesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessesMaxAggregateInputType
  }

  export type GetBusinessesAggregateType<T extends BusinessesAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinesses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinesses[P]>
      : GetScalarType<T[P], AggregateBusinesses[P]>
  }




  export type BusinessesGroupByArgs = {
    where?: businessesWhereInput
    orderBy?: Enumerable<businessesOrderByWithAggregationInput>
    by: Array<BusinessesScalarFieldEnum>
    having?: businessesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessesCountAggregateInputType | true
    _avg?: BusinessesAvgAggregateInputType
    _sum?: BusinessesSumAggregateInputType
    _min?: BusinessesMinAggregateInputType
    _max?: BusinessesMaxAggregateInputType
  }


  export type BusinessesGroupByOutputType = {
    id: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified: boolean | null
    address: string
    image: string
    usersId: number | null
    _count: BusinessesCountAggregateOutputType | null
    _avg: BusinessesAvgAggregateOutputType | null
    _sum: BusinessesSumAggregateOutputType | null
    _min: BusinessesMinAggregateOutputType | null
    _max: BusinessesMaxAggregateOutputType | null
  }

  type GetBusinessesGroupByPayload<T extends BusinessesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BusinessesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessesGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessesGroupByOutputType[P]>
        }
      >
    >


  export type businessesSelect = {
    id?: boolean
    biz_name?: boolean
    owner?: boolean
    email?: boolean
    password?: boolean
    business_type?: boolean
    verified?: boolean
    address?: boolean
    image?: boolean
    association_table?: boolean | association_tableFindManyArgs
    post?: boolean | postFindManyArgs
    users?: boolean | usersArgs
    usersId?: boolean
    _count?: boolean | BusinessesCountOutputTypeArgs
  }

  export type businessesInclude = {
    association_table?: boolean | association_tableFindManyArgs
    post?: boolean | postFindManyArgs
    users?: boolean | usersArgs
    _count?: boolean | BusinessesCountOutputTypeArgs
  }

  export type businessesGetPayload<
    S extends boolean | null | undefined | businessesArgs,
    U = keyof S
      > = S extends true
        ? businesses
    : S extends undefined
    ? never
    : S extends businessesArgs | businessesFindManyArgs
    ?'include' extends U
    ? businesses  & {
    [P in TrueKeys<S['include']>]:
        P extends 'association_table' ? Array < association_tableGetPayload<S['include'][P]>>  :
        P extends 'post' ? Array < postGetPayload<S['include'][P]>>  :
        P extends 'users' ? usersGetPayload<S['include'][P]> | null :
        P extends '_count' ? BusinessesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'association_table' ? Array < association_tableGetPayload<S['select'][P]>>  :
        P extends 'post' ? Array < postGetPayload<S['select'][P]>>  :
        P extends 'users' ? usersGetPayload<S['select'][P]> | null :
        P extends '_count' ? BusinessesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof businesses ? businesses[P] : never
  } 
    : businesses
  : businesses


  type businessesCountArgs = Merge<
    Omit<businessesFindManyArgs, 'select' | 'include'> & {
      select?: BusinessesCountAggregateInputType | true
    }
  >

  export interface businessesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Businesses that matches the filter.
     * @param {businessesFindUniqueArgs} args - Arguments to find a Businesses
     * @example
     * // Get one Businesses
     * const businesses = await prisma.businesses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends businessesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, businessesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'businesses'> extends True ? CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>> : CheckSelect<T, Prisma__businessesClient<businesses | null >, Prisma__businessesClient<businessesGetPayload<T> | null >>

    /**
     * Find the first Businesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {businessesFindFirstArgs} args - Arguments to find a Businesses
     * @example
     * // Get one Businesses
     * const businesses = await prisma.businesses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends businessesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, businessesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'businesses'> extends True ? CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>> : CheckSelect<T, Prisma__businessesClient<businesses | null >, Prisma__businessesClient<businessesGetPayload<T> | null >>

    /**
     * Find zero or more Businesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {businessesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Businesses
     * const businesses = await prisma.businesses.findMany()
     * 
     * // Get first 10 Businesses
     * const businesses = await prisma.businesses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessesWithIdOnly = await prisma.businesses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends businessesFindManyArgs>(
      args?: SelectSubset<T, businessesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<businesses>>, PrismaPromise<Array<businessesGetPayload<T>>>>

    /**
     * Create a Businesses.
     * @param {businessesCreateArgs} args - Arguments to create a Businesses.
     * @example
     * // Create one Businesses
     * const Businesses = await prisma.businesses.create({
     *   data: {
     *     // ... data to create a Businesses
     *   }
     * })
     * 
    **/
    create<T extends businessesCreateArgs>(
      args: SelectSubset<T, businessesCreateArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Create many Businesses.
     *     @param {businessesCreateManyArgs} args - Arguments to create many Businesses.
     *     @example
     *     // Create many Businesses
     *     const businesses = await prisma.businesses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends businessesCreateManyArgs>(
      args?: SelectSubset<T, businessesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Businesses.
     * @param {businessesDeleteArgs} args - Arguments to delete one Businesses.
     * @example
     * // Delete one Businesses
     * const Businesses = await prisma.businesses.delete({
     *   where: {
     *     // ... filter to delete one Businesses
     *   }
     * })
     * 
    **/
    delete<T extends businessesDeleteArgs>(
      args: SelectSubset<T, businessesDeleteArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Update one Businesses.
     * @param {businessesUpdateArgs} args - Arguments to update one Businesses.
     * @example
     * // Update one Businesses
     * const businesses = await prisma.businesses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends businessesUpdateArgs>(
      args: SelectSubset<T, businessesUpdateArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Delete zero or more Businesses.
     * @param {businessesDeleteManyArgs} args - Arguments to filter Businesses to delete.
     * @example
     * // Delete a few Businesses
     * const { count } = await prisma.businesses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends businessesDeleteManyArgs>(
      args?: SelectSubset<T, businessesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {businessesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Businesses
     * const businesses = await prisma.businesses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends businessesUpdateManyArgs>(
      args: SelectSubset<T, businessesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Businesses.
     * @param {businessesUpsertArgs} args - Arguments to update or create a Businesses.
     * @example
     * // Update or create a Businesses
     * const businesses = await prisma.businesses.upsert({
     *   create: {
     *     // ... data to create a Businesses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Businesses we want to update
     *   }
     * })
    **/
    upsert<T extends businessesUpsertArgs>(
      args: SelectSubset<T, businessesUpsertArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Find one Businesses that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {businessesFindUniqueOrThrowArgs} args - Arguments to find a Businesses
     * @example
     * // Get one Businesses
     * const businesses = await prisma.businesses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends businessesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, businessesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Find the first Businesses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {businessesFindFirstOrThrowArgs} args - Arguments to find a Businesses
     * @example
     * // Get one Businesses
     * const businesses = await prisma.businesses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends businessesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, businessesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__businessesClient<businesses>, Prisma__businessesClient<businessesGetPayload<T>>>

    /**
     * Count the number of Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {businessesCountArgs} args - Arguments to filter Businesses to count.
     * @example
     * // Count the number of Businesses
     * const count = await prisma.businesses.count({
     *   where: {
     *     // ... the filter for the Businesses we want to count
     *   }
     * })
    **/
    count<T extends businessesCountArgs>(
      args?: Subset<T, businessesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessesAggregateArgs>(args: Subset<T, BusinessesAggregateArgs>): PrismaPromise<GetBusinessesAggregateType<T>>

    /**
     * Group by Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessesGroupByArgs['orderBy'] }
        : { orderBy?: BusinessesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for businesses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__businessesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    association_table<T extends association_tableFindManyArgs = {}>(args?: Subset<T, association_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<association_table>>, PrismaPromise<Array<association_tableGetPayload<T>>>>;

    post<T extends postFindManyArgs = {}>(args?: Subset<T, postFindManyArgs>): CheckSelect<T, PrismaPromise<Array<post>>, PrismaPromise<Array<postGetPayload<T>>>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * businesses base type for findUnique actions
   */
  export type businessesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * Filter, which businesses to fetch.
     * 
    **/
    where: businessesWhereUniqueInput
  }

  /**
   * businesses: findUnique
   */
  export interface businessesFindUniqueArgs extends businessesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * businesses base type for findFirst actions
   */
  export type businessesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * Filter, which businesses to fetch.
     * 
    **/
    where?: businessesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of businesses to fetch.
     * 
    **/
    orderBy?: Enumerable<businessesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for businesses.
     * 
    **/
    cursor?: businessesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` businesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` businesses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of businesses.
     * 
    **/
    distinct?: Enumerable<BusinessesScalarFieldEnum>
  }

  /**
   * businesses: findFirst
   */
  export interface businessesFindFirstArgs extends businessesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * businesses findMany
   */
  export type businessesFindManyArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * Filter, which businesses to fetch.
     * 
    **/
    where?: businessesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of businesses to fetch.
     * 
    **/
    orderBy?: Enumerable<businessesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing businesses.
     * 
    **/
    cursor?: businessesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` businesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` businesses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BusinessesScalarFieldEnum>
  }


  /**
   * businesses create
   */
  export type businessesCreateArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * The data needed to create a businesses.
     * 
    **/
    data: XOR<businessesCreateInput, businessesUncheckedCreateInput>
  }


  /**
   * businesses createMany
   */
  export type businessesCreateManyArgs = {
    /**
     * The data used to create many businesses.
     * 
    **/
    data: Enumerable<businessesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * businesses update
   */
  export type businessesUpdateArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * The data needed to update a businesses.
     * 
    **/
    data: XOR<businessesUpdateInput, businessesUncheckedUpdateInput>
    /**
     * Choose, which businesses to update.
     * 
    **/
    where: businessesWhereUniqueInput
  }


  /**
   * businesses updateMany
   */
  export type businessesUpdateManyArgs = {
    /**
     * The data used to update businesses.
     * 
    **/
    data: XOR<businessesUpdateManyMutationInput, businessesUncheckedUpdateManyInput>
    /**
     * Filter which businesses to update
     * 
    **/
    where?: businessesWhereInput
  }


  /**
   * businesses upsert
   */
  export type businessesUpsertArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * The filter to search for the businesses to update in case it exists.
     * 
    **/
    where: businessesWhereUniqueInput
    /**
     * In case the businesses found by the `where` argument doesn't exist, create a new businesses with this data.
     * 
    **/
    create: XOR<businessesCreateInput, businessesUncheckedCreateInput>
    /**
     * In case the businesses was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<businessesUpdateInput, businessesUncheckedUpdateInput>
  }


  /**
   * businesses delete
   */
  export type businessesDeleteArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
    /**
     * Filter which businesses to delete.
     * 
    **/
    where: businessesWhereUniqueInput
  }


  /**
   * businesses deleteMany
   */
  export type businessesDeleteManyArgs = {
    /**
     * Filter which businesses to delete
     * 
    **/
    where?: businessesWhereInput
  }


  /**
   * businesses: findUniqueOrThrow
   */
  export type businessesFindUniqueOrThrowArgs = businessesFindUniqueArgsBase
      

  /**
   * businesses: findFirstOrThrow
   */
  export type businessesFindFirstOrThrowArgs = businessesFindFirstArgsBase
      

  /**
   * businesses without action
   */
  export type businessesArgs = {
    /**
     * Select specific fields to fetch from the businesses
     * 
    **/
    select?: businessesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: businessesInclude | null
  }



  /**
   * Model post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    business_id: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    business_id: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    business_id: number | null
    image: string | null
    body: string | null
    postedAT: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    business_id: number | null
    image: string | null
    body: string | null
    postedAT: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    business_id: number
    image: number
    body: number
    postedAT: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    business_id?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    business_id?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    business_id?: true
    image?: true
    body?: true
    postedAT?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    business_id?: true
    image?: true
    body?: true
    postedAT?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    business_id?: true
    image?: true
    body?: true
    postedAT?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which post to aggregate.
     * 
    **/
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: postWhereInput
    orderBy?: Enumerable<postOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: postScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    business_id: number | null
    image: string
    body: string
    postedAT: Date
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type postSelect = {
    id?: boolean
    business_id?: boolean
    image?: boolean
    body?: boolean
    postedAT?: boolean
    businesses?: boolean | businessesArgs
  }

  export type postInclude = {
    businesses?: boolean | businessesArgs
  }

  export type postGetPayload<
    S extends boolean | null | undefined | postArgs,
    U = keyof S
      > = S extends true
        ? post
    : S extends undefined
    ? never
    : S extends postArgs | postFindManyArgs
    ?'include' extends U
    ? post  & {
    [P in TrueKeys<S['include']>]:
        P extends 'businesses' ? businessesGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'businesses' ? businessesGetPayload<S['select'][P]> | null :  P extends keyof post ? post[P] : never
  } 
    : post
  : post


  type postCountArgs = Merge<
    Omit<postFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface postDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {postFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, postFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'post'> extends True ? CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>> : CheckSelect<T, Prisma__postClient<post | null >, Prisma__postClient<postGetPayload<T> | null >>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, postFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'post'> extends True ? CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>> : CheckSelect<T, Prisma__postClient<post | null >, Prisma__postClient<postGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends postFindManyArgs>(
      args?: SelectSubset<T, postFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<post>>, PrismaPromise<Array<postGetPayload<T>>>>

    /**
     * Create a Post.
     * @param {postCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends postCreateArgs>(
      args: SelectSubset<T, postCreateArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Create many Posts.
     *     @param {postCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postCreateManyArgs>(
      args?: SelectSubset<T, postCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {postDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends postDeleteArgs>(
      args: SelectSubset<T, postDeleteArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Update one Post.
     * @param {postUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postUpdateArgs>(
      args: SelectSubset<T, postUpdateArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {postDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postDeleteManyArgs>(
      args?: SelectSubset<T, postDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postUpdateManyArgs>(
      args: SelectSubset<T, postUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {postUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends postUpsertArgs>(
      args: SelectSubset<T, postUpsertArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Find one Post that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {postFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, postFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postFindFirstOrThrowArgs>(
      args?: SelectSubset<T, postFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__postClient<post>, Prisma__postClient<postGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends postCountArgs>(
      args?: Subset<T, postCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__postClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    businesses<T extends businessesArgs = {}>(args?: Subset<T, businessesArgs>): CheckSelect<T, Prisma__businessesClient<businesses | null >, Prisma__businessesClient<businessesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * post base type for findUnique actions
   */
  export type postFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * Filter, which post to fetch.
     * 
    **/
    where: postWhereUniqueInput
  }

  /**
   * post: findUnique
   */
  export interface postFindUniqueArgs extends postFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * post base type for findFirst actions
   */
  export type postFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * Filter, which post to fetch.
     * 
    **/
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     * 
    **/
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * post: findFirst
   */
  export interface postFindFirstArgs extends postFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * post findMany
   */
  export type postFindManyArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * Filter, which posts to fetch.
     * 
    **/
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing posts.
     * 
    **/
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * post create
   */
  export type postCreateArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * The data needed to create a post.
     * 
    **/
    data: XOR<postCreateInput, postUncheckedCreateInput>
  }


  /**
   * post createMany
   */
  export type postCreateManyArgs = {
    /**
     * The data used to create many posts.
     * 
    **/
    data: Enumerable<postCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * post update
   */
  export type postUpdateArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * The data needed to update a post.
     * 
    **/
    data: XOR<postUpdateInput, postUncheckedUpdateInput>
    /**
     * Choose, which post to update.
     * 
    **/
    where: postWhereUniqueInput
  }


  /**
   * post updateMany
   */
  export type postUpdateManyArgs = {
    /**
     * The data used to update posts.
     * 
    **/
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyInput>
    /**
     * Filter which posts to update
     * 
    **/
    where?: postWhereInput
  }


  /**
   * post upsert
   */
  export type postUpsertArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * The filter to search for the post to update in case it exists.
     * 
    **/
    where: postWhereUniqueInput
    /**
     * In case the post found by the `where` argument doesn't exist, create a new post with this data.
     * 
    **/
    create: XOR<postCreateInput, postUncheckedCreateInput>
    /**
     * In case the post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<postUpdateInput, postUncheckedUpdateInput>
  }


  /**
   * post delete
   */
  export type postDeleteArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
    /**
     * Filter which post to delete.
     * 
    **/
    where: postWhereUniqueInput
  }


  /**
   * post deleteMany
   */
  export type postDeleteManyArgs = {
    /**
     * Filter which posts to delete
     * 
    **/
    where?: postWhereInput
  }


  /**
   * post: findUniqueOrThrow
   */
  export type postFindUniqueOrThrowArgs = postFindUniqueArgsBase
      

  /**
   * post: findFirstOrThrow
   */
  export type postFindFirstOrThrowArgs = postFindFirstArgsBase
      

  /**
   * post without action
   */
  export type postArgs = {
    /**
     * Select specific fields to fetch from the post
     * 
    **/
    select?: postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    username: string | null
    password: string | null
    address: string | null
    image: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    username: string | null
    password: string | null
    address: string | null
    image: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    username: number
    password: number
    address: number
    image: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    username?: true
    password?: true
    address?: true
    image?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    username?: true
    password?: true
    address?: true
    image?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    username?: true
    password?: true
    address?: true
    image?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    address?: boolean
    image?: boolean
    following?: boolean | businessesFindManyArgs
    association_table?: boolean | association_tableFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    following?: boolean | businessesFindManyArgs
    association_table?: boolean | association_tableFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'following' ? Array < businessesGetPayload<S['include'][P]>>  :
        P extends 'association_table' ? Array < association_tableGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'following' ? Array < businessesGetPayload<S['select'][P]>>  :
        P extends 'association_table' ? Array < association_tableGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    following<T extends businessesFindManyArgs = {}>(args?: Subset<T, businessesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<businesses>>, PrismaPromise<Array<businessesGetPayload<T>>>>;

    association_table<T extends association_tableFindManyArgs = {}>(args?: Subset<T, association_tableFindManyArgs>): CheckSelect<T, PrismaPromise<Array<association_table>>, PrismaPromise<Array<association_tableGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Association_tableScalarFieldEnum: {
    id: 'id',
    business_id: 'business_id',
    user_id: 'user_id'
  };

  export type Association_tableScalarFieldEnum = (typeof Association_tableScalarFieldEnum)[keyof typeof Association_tableScalarFieldEnum]


  export const BusinessesScalarFieldEnum: {
    id: 'id',
    biz_name: 'biz_name',
    owner: 'owner',
    email: 'email',
    password: 'password',
    business_type: 'business_type',
    verified: 'verified',
    address: 'address',
    image: 'image',
    usersId: 'usersId'
  };

  export type BusinessesScalarFieldEnum = (typeof BusinessesScalarFieldEnum)[keyof typeof BusinessesScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    business_id: 'business_id',
    image: 'image',
    body: 'body',
    postedAT: 'postedAT'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    username: 'username',
    password: 'password',
    address: 'address',
    image: 'image'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type association_tableWhereInput = {
    AND?: Enumerable<association_tableWhereInput>
    OR?: Enumerable<association_tableWhereInput>
    NOT?: Enumerable<association_tableWhereInput>
    id?: IntFilter | number
    business_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
    businesses?: XOR<BusinessesRelationFilter, businessesWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type association_tableOrderByWithRelationInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
    businesses?: businessesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type association_tableWhereUniqueInput = {
    id?: number
  }

  export type association_tableOrderByWithAggregationInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
    _count?: association_tableCountOrderByAggregateInput
    _avg?: association_tableAvgOrderByAggregateInput
    _max?: association_tableMaxOrderByAggregateInput
    _min?: association_tableMinOrderByAggregateInput
    _sum?: association_tableSumOrderByAggregateInput
  }

  export type association_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<association_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<association_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<association_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    business_id?: IntNullableWithAggregatesFilter | number | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type businessesWhereInput = {
    AND?: Enumerable<businessesWhereInput>
    OR?: Enumerable<businessesWhereInput>
    NOT?: Enumerable<businessesWhereInput>
    id?: IntFilter | number
    biz_name?: StringFilter | string
    owner?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    business_type?: Enumbusinesses_business_typeFilter | businesses_business_type
    verified?: BoolNullableFilter | boolean | null
    address?: StringFilter | string
    image?: StringFilter | string
    association_table?: Association_tableListRelationFilter
    post?: PostListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
    usersId?: IntNullableFilter | number | null
  }

  export type businessesOrderByWithRelationInput = {
    id?: SortOrder
    biz_name?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    business_type?: SortOrder
    verified?: SortOrder
    address?: SortOrder
    image?: SortOrder
    association_table?: association_tableOrderByRelationAggregateInput
    post?: postOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    usersId?: SortOrder
  }

  export type businessesWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type businessesOrderByWithAggregationInput = {
    id?: SortOrder
    biz_name?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    business_type?: SortOrder
    verified?: SortOrder
    address?: SortOrder
    image?: SortOrder
    usersId?: SortOrder
    _count?: businessesCountOrderByAggregateInput
    _avg?: businessesAvgOrderByAggregateInput
    _max?: businessesMaxOrderByAggregateInput
    _min?: businessesMinOrderByAggregateInput
    _sum?: businessesSumOrderByAggregateInput
  }

  export type businessesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<businessesScalarWhereWithAggregatesInput>
    OR?: Enumerable<businessesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<businessesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    biz_name?: StringWithAggregatesFilter | string
    owner?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    business_type?: Enumbusinesses_business_typeWithAggregatesFilter | businesses_business_type
    verified?: BoolNullableWithAggregatesFilter | boolean | null
    address?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    usersId?: IntNullableWithAggregatesFilter | number | null
  }

  export type postWhereInput = {
    AND?: Enumerable<postWhereInput>
    OR?: Enumerable<postWhereInput>
    NOT?: Enumerable<postWhereInput>
    id?: IntFilter | number
    business_id?: IntNullableFilter | number | null
    image?: StringFilter | string
    body?: StringFilter | string
    postedAT?: DateTimeFilter | Date | string
    businesses?: XOR<BusinessesRelationFilter, businessesWhereInput> | null
  }

  export type postOrderByWithRelationInput = {
    id?: SortOrder
    business_id?: SortOrder
    image?: SortOrder
    body?: SortOrder
    postedAT?: SortOrder
    businesses?: businessesOrderByWithRelationInput
  }

  export type postWhereUniqueInput = {
    id?: number
  }

  export type postOrderByWithAggregationInput = {
    id?: SortOrder
    business_id?: SortOrder
    image?: SortOrder
    body?: SortOrder
    postedAT?: SortOrder
    _count?: postCountOrderByAggregateInput
    _avg?: postAvgOrderByAggregateInput
    _max?: postMaxOrderByAggregateInput
    _min?: postMinOrderByAggregateInput
    _sum?: postSumOrderByAggregateInput
  }

  export type postScalarWhereWithAggregatesInput = {
    AND?: Enumerable<postScalarWhereWithAggregatesInput>
    OR?: Enumerable<postScalarWhereWithAggregatesInput>
    NOT?: Enumerable<postScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    business_id?: IntNullableWithAggregatesFilter | number | null
    image?: StringWithAggregatesFilter | string
    body?: StringWithAggregatesFilter | string
    postedAT?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    address?: StringFilter | string
    image?: StringFilter | string
    following?: BusinessesListRelationFilter
    association_table?: Association_tableListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    address?: SortOrder
    image?: SortOrder
    following?: businessesOrderByRelationAggregateInput
    association_table?: association_tableOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
    username?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    address?: SortOrder
    image?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type association_tableCreateInput = {
    businesses?: businessesCreateNestedOneWithoutAssociation_tableInput
    users?: usersCreateNestedOneWithoutAssociation_tableInput
  }

  export type association_tableUncheckedCreateInput = {
    id?: number
    business_id?: number | null
    user_id?: number | null
  }

  export type association_tableUpdateInput = {
    businesses?: businessesUpdateOneWithoutAssociation_tableNestedInput
    users?: usersUpdateOneWithoutAssociation_tableNestedInput
  }

  export type association_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    business_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type association_tableCreateManyInput = {
    id?: number
    business_id?: number | null
    user_id?: number | null
  }

  export type association_tableUpdateManyMutationInput = {

  }

  export type association_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    business_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type businessesCreateInput = {
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableCreateNestedManyWithoutBusinessesInput
    post?: postCreateNestedManyWithoutBusinessesInput
    users?: usersCreateNestedOneWithoutFollowingInput
  }

  export type businessesUncheckedCreateInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableUncheckedCreateNestedManyWithoutBusinessesInput
    post?: postUncheckedCreateNestedManyWithoutBusinessesInput
    usersId?: number | null
  }

  export type businessesUpdateInput = {
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUpdateManyWithoutBusinessesNestedInput
    post?: postUpdateManyWithoutBusinessesNestedInput
    users?: usersUpdateOneWithoutFollowingNestedInput
  }

  export type businessesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUncheckedUpdateManyWithoutBusinessesNestedInput
    post?: postUncheckedUpdateManyWithoutBusinessesNestedInput
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type businessesCreateManyInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    usersId?: number | null
  }

  export type businessesUpdateManyMutationInput = {
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type businessesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type postCreateInput = {
    image: string
    body: string
    postedAT?: Date | string
    businesses?: businessesCreateNestedOneWithoutPostInput
  }

  export type postUncheckedCreateInput = {
    id?: number
    business_id?: number | null
    image: string
    body: string
    postedAT?: Date | string
  }

  export type postUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: businessesUpdateOneWithoutPostNestedInput
  }

  export type postUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    business_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postCreateManyInput = {
    id?: number
    business_id?: number | null
    image: string
    body: string
    postedAT?: Date | string
  }

  export type postUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    business_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    following?: businessesCreateNestedManyWithoutUsersInput
    association_table?: association_tableCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    following?: businessesUncheckedCreateNestedManyWithoutUsersInput
    association_table?: association_tableUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    following?: businessesUpdateManyWithoutUsersNestedInput
    association_table?: association_tableUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    following?: businessesUncheckedUpdateManyWithoutUsersNestedInput
    association_table?: association_tableUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BusinessesRelationFilter = {
    is?: businessesWhereInput | null
    isNot?: businessesWhereInput | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type association_tableCountOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
  }

  export type association_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
  }

  export type association_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
  }

  export type association_tableMinOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
  }

  export type association_tableSumOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type Enumbusinesses_business_typeFilter = {
    equals?: businesses_business_type
    in?: Enumerable<businesses_business_type>
    notIn?: Enumerable<businesses_business_type>
    not?: NestedEnumbusinesses_business_typeFilter | businesses_business_type
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type Association_tableListRelationFilter = {
    every?: association_tableWhereInput
    some?: association_tableWhereInput
    none?: association_tableWhereInput
  }

  export type PostListRelationFilter = {
    every?: postWhereInput
    some?: postWhereInput
    none?: postWhereInput
  }

  export type association_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type postOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type businessesCountOrderByAggregateInput = {
    id?: SortOrder
    biz_name?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    business_type?: SortOrder
    verified?: SortOrder
    address?: SortOrder
    image?: SortOrder
    usersId?: SortOrder
  }

  export type businessesAvgOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type businessesMaxOrderByAggregateInput = {
    id?: SortOrder
    biz_name?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    business_type?: SortOrder
    verified?: SortOrder
    address?: SortOrder
    image?: SortOrder
    usersId?: SortOrder
  }

  export type businessesMinOrderByAggregateInput = {
    id?: SortOrder
    biz_name?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    business_type?: SortOrder
    verified?: SortOrder
    address?: SortOrder
    image?: SortOrder
    usersId?: SortOrder
  }

  export type businessesSumOrderByAggregateInput = {
    id?: SortOrder
    usersId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Enumbusinesses_business_typeWithAggregatesFilter = {
    equals?: businesses_business_type
    in?: Enumerable<businesses_business_type>
    notIn?: Enumerable<businesses_business_type>
    not?: NestedEnumbusinesses_business_typeWithAggregatesFilter | businesses_business_type
    _count?: NestedIntFilter
    _min?: NestedEnumbusinesses_business_typeFilter
    _max?: NestedEnumbusinesses_business_typeFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type postCountOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    image?: SortOrder
    body?: SortOrder
    postedAT?: SortOrder
  }

  export type postAvgOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
  }

  export type postMaxOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    image?: SortOrder
    body?: SortOrder
    postedAT?: SortOrder
  }

  export type postMinOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
    image?: SortOrder
    body?: SortOrder
    postedAT?: SortOrder
  }

  export type postSumOrderByAggregateInput = {
    id?: SortOrder
    business_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BusinessesListRelationFilter = {
    every?: businessesWhereInput
    some?: businessesWhereInput
    none?: businessesWhereInput
  }

  export type businessesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type businessesCreateNestedOneWithoutAssociation_tableInput = {
    create?: XOR<businessesCreateWithoutAssociation_tableInput, businessesUncheckedCreateWithoutAssociation_tableInput>
    connectOrCreate?: businessesCreateOrConnectWithoutAssociation_tableInput
    connect?: businessesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutAssociation_tableInput = {
    create?: XOR<usersCreateWithoutAssociation_tableInput, usersUncheckedCreateWithoutAssociation_tableInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssociation_tableInput
    connect?: usersWhereUniqueInput
  }

  export type businessesUpdateOneWithoutAssociation_tableNestedInput = {
    create?: XOR<businessesCreateWithoutAssociation_tableInput, businessesUncheckedCreateWithoutAssociation_tableInput>
    connectOrCreate?: businessesCreateOrConnectWithoutAssociation_tableInput
    upsert?: businessesUpsertWithoutAssociation_tableInput
    disconnect?: boolean
    delete?: boolean
    connect?: businessesWhereUniqueInput
    update?: XOR<businessesUpdateWithoutAssociation_tableInput, businessesUncheckedUpdateWithoutAssociation_tableInput>
  }

  export type usersUpdateOneWithoutAssociation_tableNestedInput = {
    create?: XOR<usersCreateWithoutAssociation_tableInput, usersUncheckedCreateWithoutAssociation_tableInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssociation_tableInput
    upsert?: usersUpsertWithoutAssociation_tableInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutAssociation_tableInput, usersUncheckedUpdateWithoutAssociation_tableInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type association_tableCreateNestedManyWithoutBusinessesInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutBusinessesInput>, Enumerable<association_tableUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutBusinessesInput>
    createMany?: association_tableCreateManyBusinessesInputEnvelope
    connect?: Enumerable<association_tableWhereUniqueInput>
  }

  export type postCreateNestedManyWithoutBusinessesInput = {
    create?: XOR<Enumerable<postCreateWithoutBusinessesInput>, Enumerable<postUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<postCreateOrConnectWithoutBusinessesInput>
    createMany?: postCreateManyBusinessesInputEnvelope
    connect?: Enumerable<postWhereUniqueInput>
  }

  export type usersCreateNestedOneWithoutFollowingInput = {
    create?: XOR<usersCreateWithoutFollowingInput, usersUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowingInput
    connect?: usersWhereUniqueInput
  }

  export type association_tableUncheckedCreateNestedManyWithoutBusinessesInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutBusinessesInput>, Enumerable<association_tableUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutBusinessesInput>
    createMany?: association_tableCreateManyBusinessesInputEnvelope
    connect?: Enumerable<association_tableWhereUniqueInput>
  }

  export type postUncheckedCreateNestedManyWithoutBusinessesInput = {
    create?: XOR<Enumerable<postCreateWithoutBusinessesInput>, Enumerable<postUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<postCreateOrConnectWithoutBusinessesInput>
    createMany?: postCreateManyBusinessesInputEnvelope
    connect?: Enumerable<postWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Enumbusinesses_business_typeFieldUpdateOperationsInput = {
    set?: businesses_business_type
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type association_tableUpdateManyWithoutBusinessesNestedInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutBusinessesInput>, Enumerable<association_tableUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutBusinessesInput>
    upsert?: Enumerable<association_tableUpsertWithWhereUniqueWithoutBusinessesInput>
    createMany?: association_tableCreateManyBusinessesInputEnvelope
    set?: Enumerable<association_tableWhereUniqueInput>
    disconnect?: Enumerable<association_tableWhereUniqueInput>
    delete?: Enumerable<association_tableWhereUniqueInput>
    connect?: Enumerable<association_tableWhereUniqueInput>
    update?: Enumerable<association_tableUpdateWithWhereUniqueWithoutBusinessesInput>
    updateMany?: Enumerable<association_tableUpdateManyWithWhereWithoutBusinessesInput>
    deleteMany?: Enumerable<association_tableScalarWhereInput>
  }

  export type postUpdateManyWithoutBusinessesNestedInput = {
    create?: XOR<Enumerable<postCreateWithoutBusinessesInput>, Enumerable<postUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<postCreateOrConnectWithoutBusinessesInput>
    upsert?: Enumerable<postUpsertWithWhereUniqueWithoutBusinessesInput>
    createMany?: postCreateManyBusinessesInputEnvelope
    set?: Enumerable<postWhereUniqueInput>
    disconnect?: Enumerable<postWhereUniqueInput>
    delete?: Enumerable<postWhereUniqueInput>
    connect?: Enumerable<postWhereUniqueInput>
    update?: Enumerable<postUpdateWithWhereUniqueWithoutBusinessesInput>
    updateMany?: Enumerable<postUpdateManyWithWhereWithoutBusinessesInput>
    deleteMany?: Enumerable<postScalarWhereInput>
  }

  export type usersUpdateOneWithoutFollowingNestedInput = {
    create?: XOR<usersCreateWithoutFollowingInput, usersUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: usersCreateOrConnectWithoutFollowingInput
    upsert?: usersUpsertWithoutFollowingInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutFollowingInput, usersUncheckedUpdateWithoutFollowingInput>
  }

  export type association_tableUncheckedUpdateManyWithoutBusinessesNestedInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutBusinessesInput>, Enumerable<association_tableUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutBusinessesInput>
    upsert?: Enumerable<association_tableUpsertWithWhereUniqueWithoutBusinessesInput>
    createMany?: association_tableCreateManyBusinessesInputEnvelope
    set?: Enumerable<association_tableWhereUniqueInput>
    disconnect?: Enumerable<association_tableWhereUniqueInput>
    delete?: Enumerable<association_tableWhereUniqueInput>
    connect?: Enumerable<association_tableWhereUniqueInput>
    update?: Enumerable<association_tableUpdateWithWhereUniqueWithoutBusinessesInput>
    updateMany?: Enumerable<association_tableUpdateManyWithWhereWithoutBusinessesInput>
    deleteMany?: Enumerable<association_tableScalarWhereInput>
  }

  export type postUncheckedUpdateManyWithoutBusinessesNestedInput = {
    create?: XOR<Enumerable<postCreateWithoutBusinessesInput>, Enumerable<postUncheckedCreateWithoutBusinessesInput>>
    connectOrCreate?: Enumerable<postCreateOrConnectWithoutBusinessesInput>
    upsert?: Enumerable<postUpsertWithWhereUniqueWithoutBusinessesInput>
    createMany?: postCreateManyBusinessesInputEnvelope
    set?: Enumerable<postWhereUniqueInput>
    disconnect?: Enumerable<postWhereUniqueInput>
    delete?: Enumerable<postWhereUniqueInput>
    connect?: Enumerable<postWhereUniqueInput>
    update?: Enumerable<postUpdateWithWhereUniqueWithoutBusinessesInput>
    updateMany?: Enumerable<postUpdateManyWithWhereWithoutBusinessesInput>
    deleteMany?: Enumerable<postScalarWhereInput>
  }

  export type businessesCreateNestedOneWithoutPostInput = {
    create?: XOR<businessesCreateWithoutPostInput, businessesUncheckedCreateWithoutPostInput>
    connectOrCreate?: businessesCreateOrConnectWithoutPostInput
    connect?: businessesWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type businessesUpdateOneWithoutPostNestedInput = {
    create?: XOR<businessesCreateWithoutPostInput, businessesUncheckedCreateWithoutPostInput>
    connectOrCreate?: businessesCreateOrConnectWithoutPostInput
    upsert?: businessesUpsertWithoutPostInput
    disconnect?: boolean
    delete?: boolean
    connect?: businessesWhereUniqueInput
    update?: XOR<businessesUpdateWithoutPostInput, businessesUncheckedUpdateWithoutPostInput>
  }

  export type businessesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<businessesCreateWithoutUsersInput>, Enumerable<businessesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<businessesCreateOrConnectWithoutUsersInput>
    createMany?: businessesCreateManyUsersInputEnvelope
    connect?: Enumerable<businessesWhereUniqueInput>
  }

  export type association_tableCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutUsersInput>, Enumerable<association_tableUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutUsersInput>
    createMany?: association_tableCreateManyUsersInputEnvelope
    connect?: Enumerable<association_tableWhereUniqueInput>
  }

  export type businessesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<businessesCreateWithoutUsersInput>, Enumerable<businessesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<businessesCreateOrConnectWithoutUsersInput>
    createMany?: businessesCreateManyUsersInputEnvelope
    connect?: Enumerable<businessesWhereUniqueInput>
  }

  export type association_tableUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutUsersInput>, Enumerable<association_tableUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutUsersInput>
    createMany?: association_tableCreateManyUsersInputEnvelope
    connect?: Enumerable<association_tableWhereUniqueInput>
  }

  export type businessesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<businessesCreateWithoutUsersInput>, Enumerable<businessesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<businessesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<businessesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: businessesCreateManyUsersInputEnvelope
    set?: Enumerable<businessesWhereUniqueInput>
    disconnect?: Enumerable<businessesWhereUniqueInput>
    delete?: Enumerable<businessesWhereUniqueInput>
    connect?: Enumerable<businessesWhereUniqueInput>
    update?: Enumerable<businessesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<businessesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<businessesScalarWhereInput>
  }

  export type association_tableUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutUsersInput>, Enumerable<association_tableUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<association_tableUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: association_tableCreateManyUsersInputEnvelope
    set?: Enumerable<association_tableWhereUniqueInput>
    disconnect?: Enumerable<association_tableWhereUniqueInput>
    delete?: Enumerable<association_tableWhereUniqueInput>
    connect?: Enumerable<association_tableWhereUniqueInput>
    update?: Enumerable<association_tableUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<association_tableUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<association_tableScalarWhereInput>
  }

  export type businessesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<businessesCreateWithoutUsersInput>, Enumerable<businessesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<businessesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<businessesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: businessesCreateManyUsersInputEnvelope
    set?: Enumerable<businessesWhereUniqueInput>
    disconnect?: Enumerable<businessesWhereUniqueInput>
    delete?: Enumerable<businessesWhereUniqueInput>
    connect?: Enumerable<businessesWhereUniqueInput>
    update?: Enumerable<businessesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<businessesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<businessesScalarWhereInput>
  }

  export type association_tableUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<association_tableCreateWithoutUsersInput>, Enumerable<association_tableUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<association_tableCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<association_tableUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: association_tableCreateManyUsersInputEnvelope
    set?: Enumerable<association_tableWhereUniqueInput>
    disconnect?: Enumerable<association_tableWhereUniqueInput>
    delete?: Enumerable<association_tableWhereUniqueInput>
    connect?: Enumerable<association_tableWhereUniqueInput>
    update?: Enumerable<association_tableUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<association_tableUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<association_tableScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumbusinesses_business_typeFilter = {
    equals?: businesses_business_type
    in?: Enumerable<businesses_business_type>
    notIn?: Enumerable<businesses_business_type>
    not?: NestedEnumbusinesses_business_typeFilter | businesses_business_type
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumbusinesses_business_typeWithAggregatesFilter = {
    equals?: businesses_business_type
    in?: Enumerable<businesses_business_type>
    notIn?: Enumerable<businesses_business_type>
    not?: NestedEnumbusinesses_business_typeWithAggregatesFilter | businesses_business_type
    _count?: NestedIntFilter
    _min?: NestedEnumbusinesses_business_typeFilter
    _max?: NestedEnumbusinesses_business_typeFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type businessesCreateWithoutAssociation_tableInput = {
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    post?: postCreateNestedManyWithoutBusinessesInput
    users?: usersCreateNestedOneWithoutFollowingInput
  }

  export type businessesUncheckedCreateWithoutAssociation_tableInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    post?: postUncheckedCreateNestedManyWithoutBusinessesInput
    usersId?: number | null
  }

  export type businessesCreateOrConnectWithoutAssociation_tableInput = {
    where: businessesWhereUniqueInput
    create: XOR<businessesCreateWithoutAssociation_tableInput, businessesUncheckedCreateWithoutAssociation_tableInput>
  }

  export type usersCreateWithoutAssociation_tableInput = {
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    following?: businessesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutAssociation_tableInput = {
    id?: number
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    following?: businessesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutAssociation_tableInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAssociation_tableInput, usersUncheckedCreateWithoutAssociation_tableInput>
  }

  export type businessesUpsertWithoutAssociation_tableInput = {
    update: XOR<businessesUpdateWithoutAssociation_tableInput, businessesUncheckedUpdateWithoutAssociation_tableInput>
    create: XOR<businessesCreateWithoutAssociation_tableInput, businessesUncheckedCreateWithoutAssociation_tableInput>
  }

  export type businessesUpdateWithoutAssociation_tableInput = {
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    post?: postUpdateManyWithoutBusinessesNestedInput
    users?: usersUpdateOneWithoutFollowingNestedInput
  }

  export type businessesUncheckedUpdateWithoutAssociation_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    post?: postUncheckedUpdateManyWithoutBusinessesNestedInput
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUpsertWithoutAssociation_tableInput = {
    update: XOR<usersUpdateWithoutAssociation_tableInput, usersUncheckedUpdateWithoutAssociation_tableInput>
    create: XOR<usersCreateWithoutAssociation_tableInput, usersUncheckedCreateWithoutAssociation_tableInput>
  }

  export type usersUpdateWithoutAssociation_tableInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    following?: businessesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutAssociation_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    following?: businessesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type association_tableCreateWithoutBusinessesInput = {
    users?: usersCreateNestedOneWithoutAssociation_tableInput
  }

  export type association_tableUncheckedCreateWithoutBusinessesInput = {
    id?: number
    user_id?: number | null
  }

  export type association_tableCreateOrConnectWithoutBusinessesInput = {
    where: association_tableWhereUniqueInput
    create: XOR<association_tableCreateWithoutBusinessesInput, association_tableUncheckedCreateWithoutBusinessesInput>
  }

  export type association_tableCreateManyBusinessesInputEnvelope = {
    data: Enumerable<association_tableCreateManyBusinessesInput>
    skipDuplicates?: boolean
  }

  export type postCreateWithoutBusinessesInput = {
    image: string
    body: string
    postedAT?: Date | string
  }

  export type postUncheckedCreateWithoutBusinessesInput = {
    id?: number
    image: string
    body: string
    postedAT?: Date | string
  }

  export type postCreateOrConnectWithoutBusinessesInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutBusinessesInput, postUncheckedCreateWithoutBusinessesInput>
  }

  export type postCreateManyBusinessesInputEnvelope = {
    data: Enumerable<postCreateManyBusinessesInput>
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutFollowingInput = {
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    association_table?: association_tableCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutFollowingInput = {
    id?: number
    name: string
    email: string
    username: string
    password: string
    address: string
    image: string
    association_table?: association_tableUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutFollowingInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFollowingInput, usersUncheckedCreateWithoutFollowingInput>
  }

  export type association_tableUpsertWithWhereUniqueWithoutBusinessesInput = {
    where: association_tableWhereUniqueInput
    update: XOR<association_tableUpdateWithoutBusinessesInput, association_tableUncheckedUpdateWithoutBusinessesInput>
    create: XOR<association_tableCreateWithoutBusinessesInput, association_tableUncheckedCreateWithoutBusinessesInput>
  }

  export type association_tableUpdateWithWhereUniqueWithoutBusinessesInput = {
    where: association_tableWhereUniqueInput
    data: XOR<association_tableUpdateWithoutBusinessesInput, association_tableUncheckedUpdateWithoutBusinessesInput>
  }

  export type association_tableUpdateManyWithWhereWithoutBusinessesInput = {
    where: association_tableScalarWhereInput
    data: XOR<association_tableUpdateManyMutationInput, association_tableUncheckedUpdateManyWithoutAssociation_tableInput>
  }

  export type association_tableScalarWhereInput = {
    AND?: Enumerable<association_tableScalarWhereInput>
    OR?: Enumerable<association_tableScalarWhereInput>
    NOT?: Enumerable<association_tableScalarWhereInput>
    id?: IntFilter | number
    business_id?: IntNullableFilter | number | null
    user_id?: IntNullableFilter | number | null
  }

  export type postUpsertWithWhereUniqueWithoutBusinessesInput = {
    where: postWhereUniqueInput
    update: XOR<postUpdateWithoutBusinessesInput, postUncheckedUpdateWithoutBusinessesInput>
    create: XOR<postCreateWithoutBusinessesInput, postUncheckedCreateWithoutBusinessesInput>
  }

  export type postUpdateWithWhereUniqueWithoutBusinessesInput = {
    where: postWhereUniqueInput
    data: XOR<postUpdateWithoutBusinessesInput, postUncheckedUpdateWithoutBusinessesInput>
  }

  export type postUpdateManyWithWhereWithoutBusinessesInput = {
    where: postScalarWhereInput
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyWithoutPostInput>
  }

  export type postScalarWhereInput = {
    AND?: Enumerable<postScalarWhereInput>
    OR?: Enumerable<postScalarWhereInput>
    NOT?: Enumerable<postScalarWhereInput>
    id?: IntFilter | number
    business_id?: IntNullableFilter | number | null
    image?: StringFilter | string
    body?: StringFilter | string
    postedAT?: DateTimeFilter | Date | string
  }

  export type usersUpsertWithoutFollowingInput = {
    update: XOR<usersUpdateWithoutFollowingInput, usersUncheckedUpdateWithoutFollowingInput>
    create: XOR<usersCreateWithoutFollowingInput, usersUncheckedCreateWithoutFollowingInput>
  }

  export type usersUpdateWithoutFollowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type businessesCreateWithoutPostInput = {
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableCreateNestedManyWithoutBusinessesInput
    users?: usersCreateNestedOneWithoutFollowingInput
  }

  export type businessesUncheckedCreateWithoutPostInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableUncheckedCreateNestedManyWithoutBusinessesInput
    usersId?: number | null
  }

  export type businessesCreateOrConnectWithoutPostInput = {
    where: businessesWhereUniqueInput
    create: XOR<businessesCreateWithoutPostInput, businessesUncheckedCreateWithoutPostInput>
  }

  export type businessesUpsertWithoutPostInput = {
    update: XOR<businessesUpdateWithoutPostInput, businessesUncheckedUpdateWithoutPostInput>
    create: XOR<businessesCreateWithoutPostInput, businessesUncheckedCreateWithoutPostInput>
  }

  export type businessesUpdateWithoutPostInput = {
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUpdateManyWithoutBusinessesNestedInput
    users?: usersUpdateOneWithoutFollowingNestedInput
  }

  export type businessesUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUncheckedUpdateManyWithoutBusinessesNestedInput
    usersId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type businessesCreateWithoutUsersInput = {
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableCreateNestedManyWithoutBusinessesInput
    post?: postCreateNestedManyWithoutBusinessesInput
  }

  export type businessesUncheckedCreateWithoutUsersInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
    association_table?: association_tableUncheckedCreateNestedManyWithoutBusinessesInput
    post?: postUncheckedCreateNestedManyWithoutBusinessesInput
  }

  export type businessesCreateOrConnectWithoutUsersInput = {
    where: businessesWhereUniqueInput
    create: XOR<businessesCreateWithoutUsersInput, businessesUncheckedCreateWithoutUsersInput>
  }

  export type businessesCreateManyUsersInputEnvelope = {
    data: Enumerable<businessesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type association_tableCreateWithoutUsersInput = {
    businesses?: businessesCreateNestedOneWithoutAssociation_tableInput
  }

  export type association_tableUncheckedCreateWithoutUsersInput = {
    id?: number
    business_id?: number | null
  }

  export type association_tableCreateOrConnectWithoutUsersInput = {
    where: association_tableWhereUniqueInput
    create: XOR<association_tableCreateWithoutUsersInput, association_tableUncheckedCreateWithoutUsersInput>
  }

  export type association_tableCreateManyUsersInputEnvelope = {
    data: Enumerable<association_tableCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type businessesUpsertWithWhereUniqueWithoutUsersInput = {
    where: businessesWhereUniqueInput
    update: XOR<businessesUpdateWithoutUsersInput, businessesUncheckedUpdateWithoutUsersInput>
    create: XOR<businessesCreateWithoutUsersInput, businessesUncheckedCreateWithoutUsersInput>
  }

  export type businessesUpdateWithWhereUniqueWithoutUsersInput = {
    where: businessesWhereUniqueInput
    data: XOR<businessesUpdateWithoutUsersInput, businessesUncheckedUpdateWithoutUsersInput>
  }

  export type businessesUpdateManyWithWhereWithoutUsersInput = {
    where: businessesScalarWhereInput
    data: XOR<businessesUpdateManyMutationInput, businessesUncheckedUpdateManyWithoutFollowingInput>
  }

  export type businessesScalarWhereInput = {
    AND?: Enumerable<businessesScalarWhereInput>
    OR?: Enumerable<businessesScalarWhereInput>
    NOT?: Enumerable<businessesScalarWhereInput>
    id?: IntFilter | number
    biz_name?: StringFilter | string
    owner?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    business_type?: Enumbusinesses_business_typeFilter | businesses_business_type
    verified?: BoolNullableFilter | boolean | null
    address?: StringFilter | string
    image?: StringFilter | string
    usersId?: IntNullableFilter | number | null
  }

  export type association_tableUpsertWithWhereUniqueWithoutUsersInput = {
    where: association_tableWhereUniqueInput
    update: XOR<association_tableUpdateWithoutUsersInput, association_tableUncheckedUpdateWithoutUsersInput>
    create: XOR<association_tableCreateWithoutUsersInput, association_tableUncheckedCreateWithoutUsersInput>
  }

  export type association_tableUpdateWithWhereUniqueWithoutUsersInput = {
    where: association_tableWhereUniqueInput
    data: XOR<association_tableUpdateWithoutUsersInput, association_tableUncheckedUpdateWithoutUsersInput>
  }

  export type association_tableUpdateManyWithWhereWithoutUsersInput = {
    where: association_tableScalarWhereInput
    data: XOR<association_tableUpdateManyMutationInput, association_tableUncheckedUpdateManyWithoutAssociation_tableInput>
  }

  export type association_tableCreateManyBusinessesInput = {
    id?: number
    user_id?: number | null
  }

  export type postCreateManyBusinessesInput = {
    id?: number
    image: string
    body: string
    postedAT?: Date | string
  }

  export type association_tableUpdateWithoutBusinessesInput = {
    users?: usersUpdateOneWithoutAssociation_tableNestedInput
  }

  export type association_tableUncheckedUpdateWithoutBusinessesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type association_tableUncheckedUpdateManyWithoutAssociation_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type postUpdateWithoutBusinessesInput = {
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postUncheckedUpdateWithoutBusinessesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    postedAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type businessesCreateManyUsersInput = {
    id?: number
    biz_name: string
    owner: string
    email: string
    password: string
    business_type: businesses_business_type
    verified?: boolean | null
    address: string
    image: string
  }

  export type association_tableCreateManyUsersInput = {
    id?: number
    business_id?: number | null
  }

  export type businessesUpdateWithoutUsersInput = {
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUpdateManyWithoutBusinessesNestedInput
    post?: postUpdateManyWithoutBusinessesNestedInput
  }

  export type businessesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    association_table?: association_tableUncheckedUpdateManyWithoutBusinessesNestedInput
    post?: postUncheckedUpdateManyWithoutBusinessesNestedInput
  }

  export type businessesUncheckedUpdateManyWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    biz_name?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    business_type?: Enumbusinesses_business_typeFieldUpdateOperationsInput | businesses_business_type
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type association_tableUpdateWithoutUsersInput = {
    businesses?: businessesUpdateOneWithoutAssociation_tableNestedInput
  }

  export type association_tableUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    business_id?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}